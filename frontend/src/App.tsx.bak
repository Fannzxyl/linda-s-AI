import React, { useEffect, useMemo, useRef, useState } from "react";
import Avatar from "./components/Avatar";
import Chat, { Msg } from "./components/Chat";

/* endpoint via vite proxy (vite.config.ts): /api -> http://localhost:8000 */
const CHAT_URL = "/api/chat";
const RESET_URL = "/api/reset";  // opsional; aman jika 404
const AVATAR_API = "";           // isi "/api/avatar" kalau sudah ada endpoint

/* ===== helpers ===== */
function useLocalStorage<T>(key: string, initial: T) {
  const [val, setVal] = useState<T>(() => {
    try {
      const raw = localStorage.getItem(key);
      return raw ? (JSON.parse(raw) as T) : initial;
    } catch {
      return initial;
    }
  });
  useEffect(() => {
    try {
      localStorage.setItem(key, JSON.stringify(val));
    } catch {}
  }, [key, val]);
  return [val, setVal] as const;
}

const toPersona = (s: string) => {
  const v = s.toLowerCase();
  if (v.includes("tsundere")) return "tsundere";
  if (v.includes("formal")) return "formal";
  if (v.includes("santai")) return "santai";
  if (v.includes("netral")) return "netral";
  return "ceria";
};

/* auto-resize textarea */
function autoResize(el: HTMLTextAreaElement) {
  el.style.height = "auto";
  el.style.height = Math.min(el.scrollHeight, 160) + "px";
}

/* ===== component ===== */
export default function App() {
  const [styleName, setStyleName] = useLocalStorage("styleName", "Ceria");
  const [lightMemory, setLightMemory] = useLocalStorage("lightMemory", true);
  const [input, setInput] = useState("");
  const [messages, setMessages] = useState<Msg[]>([
    { id: crypto.randomUUID(), role: "assistant", content: "Halo! Aku siap bantu. Tulis pesanmu di bawah." },
  ]);
  const [sending, setSending] = useState(false);
  const [typing, setTyping] = useState(false);

  const persona = useMemo(() => toPersona(styleName), [styleName]);

  /* apply persona theme ke <body> */
  useEffect(() => {
    document.body.setAttribute("data-persona", persona);
  }, [persona]);

  /* autoscroll */
  const listRef = useRef<HTMLDivElement>(null);
  useEffect(() => {
    listRef.current?.scrollTo({ top: listRef.current.scrollHeight, behavior: "smooth" });
  }, [messages, typing]);

  /* kirim pesan (SSE streaming + fallback JSON) */
  async function onSend() {
    const text = input.trim();
    if (!text || sending) return;

    setInput("");
    setSending(true);
    setTyping(true);

    const userMsg: Msg = { id: crypto.randomUUID(), role: "user", content: text };
    setMessages((m) => [...m, userMsg]);

    const history = messages
      .filter((x) => x.role !== "system")
      .concat(userMsg)
      .map(({ role, content }) => ({ role, content }));

    // coba SSE
    try {
      const res = await fetch(CHAT_URL, {
        method: "POST",
        headers: { "Content-Type": "application/json", Accept: "text/event-stream" },
        body: JSON.stringify({
          messages: history,
          style: persona,   // pastikan backend terima gaya
          persona,          // duplikasi kunci untuk kompatibilitas
          lightMemory,
        }),
      });

      if (res.ok && res.body) {
        const id = crypto.randomUUID();
        setMessages((m) => [...m, { id, role: "assistant", content: "" }]);

        const reader = res.body.getReader();
        const decoder = new TextDecoder("utf-8");
        let buffer = "";

        while (true) {
          const { value, done } = await reader.read();
          if (done) break;

          buffer += decoder.decode(value, { stream: true });

          // parse SSE per blok (dipisah \n\n), dukung event: dan data:
          const blocks = buffer.split("\n\n");
          buffer = blocks.pop() || "";

          for (const blk of blocks) {
            let eventType = "message";
            const dataLines: string[] = [];

            for (const line of blk.split("\n")) {
              if (!line.trim()) continue;
              if (line.startsWith("event:")) eventType = line.slice(6).trim();
              else if (line.startsWith("data:")) dataLines.push(line.slice(5).trim());
            }

            const data = dataLines.join("\n");
            if (!data) continue;
            if (eventType === "done" || data === "[DONE]") {
              // selesai segmen
              continue;
            }

            setMessages((m) =>
              m.map((msg) =>
                msg.id === id ? { ...msg, content: (msg.content || "") + data } : msg
              )
            );
          }
        }

        setTyping(false);
        setSending(false);
        return;
      }
    } catch {
      // lanjut fallback
    }

    // fallback non-stream
    try {
      const res = await fetch(CHAT_URL, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          messages: history,
          style: persona,
          persona,
          lightMemory,
        }),
      });

      let reply = "Baik. Ada lagi?";
      if (res.ok) {
        const json = await res.json().catch(() => ({} as any));
        reply =
          (json?.reply as string) ??
          (json?.data?.reply as string) ??
          (json?.output as string) ??
          reply;
      } else {
        reply = "Server sibuk. Coba lagi sebentar.";
      }

      setMessages((m) => [...m, { id: crypto.randomUUID(), role: "assistant", content: reply }]);
    } catch {
      setMessages((m) => [
        ...m,
        { id: crypto.randomUUID(), role: "assistant", content: "Koneksi gagal. Coba lagi." },
      ]);
    } finally {
      setTyping(false);
      setSending(false);
    }
  }

  /* clear chat: reset UI + sinyal reset ke backend */
  async function onClear() {
    setMessages([{ id: crypto.randomUUID(), role: "assistant", content: "Mulai baru." }]);

    // coba endpoint reset (abaikan kalau 404)
    try { await fetch(RESET_URL, { method: "POST" }); } catch {}

    // sinyal reset via chat juga (untuk backend yang tidak punya /reset)
    try {
      await fetch(CHAT_URL, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ reset: true, style: persona, persona }),
      });
    } catch {}

    // fokuskan textarea lagi
    setTimeout(() => {
      const ta = document.querySelector<HTMLTextAreaElement>("textarea.textarea, textarea.chat-textarea");
      ta?.focus();
    }, 0);
  }

  function onKeyDown(e: React.KeyboardEvent<HTMLTextAreaElement>) {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      onSend();
    }
  }

  return (
    <div className="app">
      {/* header */}
      <header className="app-header">
        <div className="brand">
          <span className="brand-dot" />
          Linda AI
        </div>
      </header>

      {/* grid utama */}
      <main className="layout">
        {/* sidebar kiri */}
        <aside className="sidebar">
          <h3 className="section-title">Avatar</h3>

          <div className="avatar-card">
            <div className="avatar-glow" />
            <div className="avatar-canvas">
              <Avatar api={AVATAR_API} persona={persona} typing={typing} />
            </div>
          </div>

          <div className="control">
            <label className="label">Gaya bicara</label>
            <select
              className="select"
              value={styleName}
              onChange={(e) => setStyleName(e.target.value)}
              aria-label="Pilih gaya bicara"
            >
              <option>Ceria</option>
              <option>Santai</option>
              <option>Netral</option>
              <option>Formal</option>
              <option>Tsundere</option>
            </select>

            <label className="checkbox-wrap">
              <input
                className="checkbox"
                type="checkbox"
                checked={lightMemory}
                onChange={(e) => setLightMemory(e.target.checked)}
              />
              Gunakan memori ringan
            </label>
          </div>
        </aside>

        {/* panel chat kanan */}
        <section className="chat">
          <div className="chat-header">
            <h3 className="section-title" style={{ fontSize: "1rem" }}>Obrolan</h3>
            <button className="pill" onClick={onClear}>Clear Chat</button>
          </div>

          <Chat refDiv={listRef} messages={messages} typing={typing} />

          {/* composer */}
          <div className="composer">
            <div className="input">
              <textarea
                className="textarea"
                placeholder="Tulis pesanmu…"
                value={input}
                rows={1}
                onChange={(e) => { setInput(e.target.value); autoResize(e.currentTarget); }}
                onKeyDown={onKeyDown}
              />
              <button className="send" disabled={!input.trim() || sending} onClick={onSend}>
                {sending ? "Mengirim…" : "Kirim"}
              </button>
            </div>
            <div className="meta">
              <span>{input.length}/2000</span>
              <span className="pill" style={{ padding: ".18rem .6rem" }}>{styleName}</span>
            </div>
          </div>
        </section>
      </main>
    </div>
  );
}