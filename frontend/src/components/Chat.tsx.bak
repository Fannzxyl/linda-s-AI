import React from "react";

export type Role = "user" | "assistant" | "system";
export type Msg = { id: string; role: Role; content: string };

export default function Chat({
  messages,
  typing,
  refDiv,
}: {
  messages: Msg[];
  typing: boolean;
  refDiv: React.RefObject<HTMLDivElement>;
}) {
  return (
    <div ref={refDiv} className="messages" aria-live="polite">
      {messages.map((m) => (
        <Message key={m.id} role={m.role} content={m.content} />
      ))}

      {typing && (
        <div className="msg assistant">
          <div className="bubble">
            <span className="typing"><span className="dot"></span><span className="dot"></span><span className="dot"></span></span>
          </div>
        </div>
      )}
    </div>
  );
}

function Message({ role, content }: { role: Role; content: string }) {
  if (role === "system") return null;
  const isUser = role === "user";
  const parts = splitCode(content);

  return (
    <div className={`msg ${isUser ? "user" : "assistant"}`}>
      <div className="bubble">
        {parts.map((p, i) =>
          p.type === "code" ? (
            <pre key={i}><code>{p.content}</code></pre>
          ) : (
            <span key={i}>{p.content}</span>
          )
        )}
      </div>
    </div>
  );
}

/* parser sederhana buat blok ```code``` */
function splitCode(text: string): { type: "text" | "code"; content: string }[] {
  const out: { type: "text" | "code"; content: string }[] = [];
  const fence = "```";
  let rest = text;
  while (true) {
    const i = rest.indexOf(fence);
    if (i === -1) { if (rest) out.push({ type: "text", content: rest }); break; }
    const before = rest.slice(0, i);
    if (before) out.push({ type: "text", content: before });
    const j = rest.indexOf(fence, i + fence.length);
    if (j === -1) { out.push({ type: "text", content: rest.slice(i) }); break; }
    const code = rest.slice(i + fence.length, j);
    out.push({ type: "code", content: code.trim() });
    rest = rest.slice(j + fence.length);
  }
  return out;
}