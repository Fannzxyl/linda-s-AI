import {
  forwardRef,
  useCallback,
  useEffect,
  useImperativeHandle,
  useMemo,
  useRef,
  useState,
} from "react";
import Avatar from "./Avatar";
import {
  EyeConfig,
  defaultEyeConfig,
  loadEyeConfig,
  saveEyeConfig,
} from "../config/eyes";

export type CharacterLayerHandle = {
  resetEyes: () => void;
  openCalibration: () => void;
};

type CharacterLayerProps = {
  className?: string;
  personaStyle: string;
};

const CharacterLayer = forwardRef<CharacterLayerHandle, CharacterLayerProps>(
  ({ className, personaStyle }, ref) => {
    const containerRef = useRef<HTMLDivElement>(null);
    const [eyeConfig, setEyeConfig] = useState<EyeConfig>(() => loadEyeConfig());
    const [showDevPanel, setShowDevPanel] = useState(false);

    useEffect(() => {
      saveEyeConfig(eyeConfig);
    }, [eyeConfig]);

    const sliderConfig = useMemo(
      () => [
        {
          label: "Left X",
          value: eyeConfig.centerLeft.x,
          min: 60,
          max: 260,
          step: 1,
          onChange: (value: number) =>
            setEyeConfig((prev) => ({
              ...prev,
              centerLeft: { ...prev.centerLeft, x: value },
            })),
        },
        {
          label: "Left Y",
          value: eyeConfig.centerLeft.y,
          min: 60,
          max: 260,
          step: 1,
          onChange: (value: number) =>
            setEyeConfig((prev) => ({
              ...prev,
              centerLeft: { ...prev.centerLeft, y: value },
            })),
        },
        {
          label: "Right X",
          value: eyeConfig.centerRight.x,
          min: 60,
          max: 260,
          step: 1,
          onChange: (value: number) =>
            setEyeConfig((prev) => ({
              ...prev,
              centerRight: { ...prev.centerRight, x: value },
            })),
        },
        {
          label: "Right Y",
          value: eyeConfig.centerRight.y,
          min: 60,
          max: 260,
          step: 1,
          onChange: (value: number) =>
            setEyeConfig((prev) => ({
              ...prev,
              centerRight: { ...prev.centerRight, y: value },
            })),
        },
        {
          label: "Radius",
          value: eyeConfig.radiusMax,
          min: 2,
          max: 12,
          step: 0.5,
          onChange: (value: number) =>
            setEyeConfig((prev) => ({
              ...prev,
              radiusMax: value,
            })),
        },
      ],
      [eyeConfig],
    );

    const handleReset = useCallback(() => {
      setEyeConfig(defaultEyeConfig);
    }, []);

    useImperativeHandle(
      ref,
      () => ({
        resetEyes: () => {
          handleReset();
          setShowDevPanel(true);
        },
        openCalibration: () => setShowDevPanel(true),
      }),
      [handleReset],
    );

    return (
      <div
        ref={containerRef}
        className={`avatar-wrapper${className ? ` ${className}` : ""}`}
        data-persona={personaStyle}
      >
        <div className="avatar-glow" />
        
        {/* ========================================================== */}
        {/*                     PERBAIKAN DI SINI                      */}
        {/* Mengubah nama file dari .png menjadi .gif agar sesuai      */}
        {/* ========================================================== */}
        <img
          src="/character.gif" 
          alt="Linda anime avatar"
          className="avatar-image"
        />

        <div className="avatar-shine" />
        <Avatar eyeConfig={eyeConfig} containerRef={containerRef} />
        <button
          type="button"
          className="tag-pill avatar-toggle"
          onClick={() => setShowDevPanel((prev) => !prev)}
        >
          Kalibrasi
        </button>
        {showDevPanel && (
          <div className="calibration-panel">
            {sliderConfig.map((slider) => (
              <label key={slider.label} className="calibration-row">
                {slider.label}: {slider.value.toFixed(1)}
                <input
                  type="range"
                  min={slider.min}
                  max={slider.max}
                  step={slider.step}
                  value={slider.value}
                  onChange={(event) =>
                    slider.onChange(Number(event.target.value))
                  }
                />
              </label>
            ))}
            <button
              type="button"
              className="tag-pill calibration-reset"
              onClick={handleReset}
            >
              Reset
            </button>
          </div>
        )}
      </div>
    );
  },
);

CharacterLayer.displayName = "CharacterLayer";

export default CharacterLayer;